// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.30.0
// source: companies.sql

package sqlc

import (
	"context"

	"github.com/google/uuid"
	"github.com/jackc/pgx/v5/pgtype"
)

const countCompanies = `-- name: CountCompanies :one
SELECT COUNT(*) FROM companies
WHERE deleted_at IS NULL
`

func (q *Queries) CountCompanies(ctx context.Context) (int64, error) {
	row := q.db.QueryRow(ctx, countCompanies)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const createCompany = `-- name: CreateCompany :one
INSERT INTO companies (
    id, name, website, slug, logo_url, created_at, updated_at
) VALUES (
    $1, $2, $3, $4, $5, $6, $7
) RETURNING id, name, website, slug, logo_url, created_at, updated_at, deleted_at
`

type CreateCompanyParams struct {
	ID        uuid.UUID          `json:"id"`
	Name      string             `json:"name"`
	Website   *string            `json:"website"`
	Slug      string             `json:"slug"`
	LogoUrl   *string            `json:"logo_url"`
	CreatedAt pgtype.Timestamptz `json:"created_at"`
	UpdatedAt pgtype.Timestamptz `json:"updated_at"`
}

func (q *Queries) CreateCompany(ctx context.Context, arg CreateCompanyParams) (Company, error) {
	row := q.db.QueryRow(ctx, createCompany,
		arg.ID,
		arg.Name,
		arg.Website,
		arg.Slug,
		arg.LogoUrl,
		arg.CreatedAt,
		arg.UpdatedAt,
	)
	var i Company
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Website,
		&i.Slug,
		&i.LogoUrl,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
	)
	return i, err
}

const getCompany = `-- name: GetCompany :one
SELECT id, name, website, slug, logo_url, created_at, updated_at, deleted_at FROM companies
WHERE id = $1 AND deleted_at IS NULL
`

func (q *Queries) GetCompany(ctx context.Context, id uuid.UUID) (Company, error) {
	row := q.db.QueryRow(ctx, getCompany, id)
	var i Company
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Website,
		&i.Slug,
		&i.LogoUrl,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
	)
	return i, err
}

const getCompanyBySlug = `-- name: GetCompanyBySlug :one
SELECT id, name, website, slug, logo_url, created_at, updated_at, deleted_at FROM companies
WHERE slug = $1 AND deleted_at IS NULL
`

func (q *Queries) GetCompanyBySlug(ctx context.Context, slug string) (Company, error) {
	row := q.db.QueryRow(ctx, getCompanyBySlug, slug)
	var i Company
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Website,
		&i.Slug,
		&i.LogoUrl,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
	)
	return i, err
}

const hardDeleteCompany = `-- name: HardDeleteCompany :exec
DELETE FROM companies
WHERE id = $1
`

func (q *Queries) HardDeleteCompany(ctx context.Context, id uuid.UUID) error {
	_, err := q.db.Exec(ctx, hardDeleteCompany, id)
	return err
}

const listCompanies = `-- name: ListCompanies :many
SELECT id, name, website, slug, logo_url, created_at, updated_at, deleted_at FROM companies
WHERE deleted_at IS NULL
ORDER BY created_at DESC
LIMIT $1 OFFSET $2
`

type ListCompaniesParams struct {
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

func (q *Queries) ListCompanies(ctx context.Context, arg ListCompaniesParams) ([]Company, error) {
	rows, err := q.db.Query(ctx, listCompanies, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Company
	for rows.Next() {
		var i Company
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Website,
			&i.Slug,
			&i.LogoUrl,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.DeletedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const searchCompanies = `-- name: SearchCompanies :many
SELECT id, name, website, slug, logo_url, created_at, updated_at, deleted_at FROM companies
WHERE deleted_at IS NULL
AND (name ILIKE $1 OR slug ILIKE $1)
ORDER BY name ASC
LIMIT $2 OFFSET $3
`

type SearchCompaniesParams struct {
	Name   string `json:"name"`
	Limit  int32  `json:"limit"`
	Offset int32  `json:"offset"`
}

func (q *Queries) SearchCompanies(ctx context.Context, arg SearchCompaniesParams) ([]Company, error) {
	rows, err := q.db.Query(ctx, searchCompanies, arg.Name, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Company
	for rows.Next() {
		var i Company
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Website,
			&i.Slug,
			&i.LogoUrl,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.DeletedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const softDeleteCompany = `-- name: SoftDeleteCompany :exec
UPDATE companies
SET deleted_at = NOW()
WHERE id = $1 AND deleted_at IS NULL
`

func (q *Queries) SoftDeleteCompany(ctx context.Context, id uuid.UUID) error {
	_, err := q.db.Exec(ctx, softDeleteCompany, id)
	return err
}

const updateCompany = `-- name: UpdateCompany :one
UPDATE companies
SET 
    name = $2,
    website = $3,
    slug = $4,
    logo_url = $5,
    updated_at = $6
WHERE id = $1 AND deleted_at IS NULL
RETURNING id, name, website, slug, logo_url, created_at, updated_at, deleted_at
`

type UpdateCompanyParams struct {
	ID        uuid.UUID          `json:"id"`
	Name      string             `json:"name"`
	Website   *string            `json:"website"`
	Slug      string             `json:"slug"`
	LogoUrl   *string            `json:"logo_url"`
	UpdatedAt pgtype.Timestamptz `json:"updated_at"`
}

func (q *Queries) UpdateCompany(ctx context.Context, arg UpdateCompanyParams) (Company, error) {
	row := q.db.QueryRow(ctx, updateCompany,
		arg.ID,
		arg.Name,
		arg.Website,
		arg.Slug,
		arg.LogoUrl,
		arg.UpdatedAt,
	)
	var i Company
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Website,
		&i.Slug,
		&i.LogoUrl,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
	)
	return i, err
}
