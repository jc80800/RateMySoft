// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.30.0
// source: reviews.sql

package sqlc

import (
	"context"

	"github.com/google/uuid"
	"github.com/jackc/pgx/v5/pgtype"
)

const countReviewsByProduct = `-- name: CountReviewsByProduct :one
SELECT COUNT(*) FROM reviews
WHERE product_id = $1 AND deleted_at IS NULL AND status = 'published'
`

func (q *Queries) CountReviewsByProduct(ctx context.Context, productID uuid.UUID) (int64, error) {
	row := q.db.QueryRow(ctx, countReviewsByProduct, productID)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const countReviewsByUser = `-- name: CountReviewsByUser :one
SELECT COUNT(*) FROM reviews
WHERE user_id = $1 AND deleted_at IS NULL
`

func (q *Queries) CountReviewsByUser(ctx context.Context, userID uuid.UUID) (int64, error) {
	row := q.db.QueryRow(ctx, countReviewsByUser, userID)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const createReview = `-- name: CreateReview :one
INSERT INTO reviews (
    id, product_id, user_id, title, body, rating, status,
    upvote_count, downvote_count, flag_count, edited, created_at, updated_at
) VALUES (
    $1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13
) RETURNING id, product_id, user_id, title, body, rating, status, upvote_count, downvote_count, flag_count, edited, created_at, updated_at, deleted_at
`

type CreateReviewParams struct {
	ID            uuid.UUID          `json:"id"`
	ProductID     uuid.UUID          `json:"product_id"`
	UserID        uuid.UUID          `json:"user_id"`
	Title         *string            `json:"title"`
	Body          string             `json:"body"`
	Rating        int32              `json:"rating"`
	Status        string             `json:"status"`
	UpvoteCount   int32              `json:"upvote_count"`
	DownvoteCount int32              `json:"downvote_count"`
	FlagCount     int32              `json:"flag_count"`
	Edited        bool               `json:"edited"`
	CreatedAt     pgtype.Timestamptz `json:"created_at"`
	UpdatedAt     pgtype.Timestamptz `json:"updated_at"`
}

func (q *Queries) CreateReview(ctx context.Context, arg CreateReviewParams) (Review, error) {
	row := q.db.QueryRow(ctx, createReview,
		arg.ID,
		arg.ProductID,
		arg.UserID,
		arg.Title,
		arg.Body,
		arg.Rating,
		arg.Status,
		arg.UpvoteCount,
		arg.DownvoteCount,
		arg.FlagCount,
		arg.Edited,
		arg.CreatedAt,
		arg.UpdatedAt,
	)
	var i Review
	err := row.Scan(
		&i.ID,
		&i.ProductID,
		&i.UserID,
		&i.Title,
		&i.Body,
		&i.Rating,
		&i.Status,
		&i.UpvoteCount,
		&i.DownvoteCount,
		&i.FlagCount,
		&i.Edited,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
	)
	return i, err
}

const getAverageRatingByProduct = `-- name: GetAverageRatingByProduct :one
SELECT AVG(rating)::DECIMAL(3,2) as avg_rating
FROM reviews
WHERE product_id = $1 AND deleted_at IS NULL AND status = 'published'
`

func (q *Queries) GetAverageRatingByProduct(ctx context.Context, productID uuid.UUID) (pgtype.Numeric, error) {
	row := q.db.QueryRow(ctx, getAverageRatingByProduct, productID)
	var avg_rating pgtype.Numeric
	err := row.Scan(&avg_rating)
	return avg_rating, err
}

const getReview = `-- name: GetReview :one
SELECT r.id, r.product_id, r.user_id, r.title, r.body, r.rating, r.status, r.upvote_count, r.downvote_count, r.flag_count, r.edited, r.created_at, r.updated_at, r.deleted_at, u.handle as user_handle, p.name as product_name
FROM reviews r
JOIN users u ON r.user_id = u.id
JOIN products p ON r.product_id = p.id
WHERE r.id = $1 AND r.deleted_at IS NULL AND u.deleted_at IS NULL AND p.deleted_at IS NULL
`

type GetReviewRow struct {
	ID            uuid.UUID          `json:"id"`
	ProductID     uuid.UUID          `json:"product_id"`
	UserID        uuid.UUID          `json:"user_id"`
	Title         *string            `json:"title"`
	Body          string             `json:"body"`
	Rating        int32              `json:"rating"`
	Status        string             `json:"status"`
	UpvoteCount   int32              `json:"upvote_count"`
	DownvoteCount int32              `json:"downvote_count"`
	FlagCount     int32              `json:"flag_count"`
	Edited        bool               `json:"edited"`
	CreatedAt     pgtype.Timestamptz `json:"created_at"`
	UpdatedAt     pgtype.Timestamptz `json:"updated_at"`
	DeletedAt     pgtype.Timestamptz `json:"deleted_at"`
	UserHandle    string             `json:"user_handle"`
	ProductName   string             `json:"product_name"`
}

func (q *Queries) GetReview(ctx context.Context, id uuid.UUID) (GetReviewRow, error) {
	row := q.db.QueryRow(ctx, getReview, id)
	var i GetReviewRow
	err := row.Scan(
		&i.ID,
		&i.ProductID,
		&i.UserID,
		&i.Title,
		&i.Body,
		&i.Rating,
		&i.Status,
		&i.UpvoteCount,
		&i.DownvoteCount,
		&i.FlagCount,
		&i.Edited,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
		&i.UserHandle,
		&i.ProductName,
	)
	return i, err
}

const getReviewsByProduct = `-- name: GetReviewsByProduct :many
SELECT r.id, r.product_id, r.user_id, r.title, r.body, r.rating, r.status, r.upvote_count, r.downvote_count, r.flag_count, r.edited, r.created_at, r.updated_at, r.deleted_at, u.handle as user_handle
FROM reviews r
JOIN users u ON r.user_id = u.id
WHERE r.product_id = $1 AND r.deleted_at IS NULL AND u.deleted_at IS NULL
ORDER BY 
    CASE WHEN $2 = 'upvotes' THEN r.upvote_count END DESC,
    CASE WHEN $2 = 'rating_desc' THEN r.rating END DESC,
    CASE WHEN $2 = 'rating_asc' THEN r.rating END ASC,
    r.created_at DESC
LIMIT $3 OFFSET $4
`

type GetReviewsByProductParams struct {
	ProductID uuid.UUID   `json:"product_id"`
	Column2   interface{} `json:"column_2"`
	Limit     int32       `json:"limit"`
	Offset    int32       `json:"offset"`
}

type GetReviewsByProductRow struct {
	ID            uuid.UUID          `json:"id"`
	ProductID     uuid.UUID          `json:"product_id"`
	UserID        uuid.UUID          `json:"user_id"`
	Title         *string            `json:"title"`
	Body          string             `json:"body"`
	Rating        int32              `json:"rating"`
	Status        string             `json:"status"`
	UpvoteCount   int32              `json:"upvote_count"`
	DownvoteCount int32              `json:"downvote_count"`
	FlagCount     int32              `json:"flag_count"`
	Edited        bool               `json:"edited"`
	CreatedAt     pgtype.Timestamptz `json:"created_at"`
	UpdatedAt     pgtype.Timestamptz `json:"updated_at"`
	DeletedAt     pgtype.Timestamptz `json:"deleted_at"`
	UserHandle    string             `json:"user_handle"`
}

func (q *Queries) GetReviewsByProduct(ctx context.Context, arg GetReviewsByProductParams) ([]GetReviewsByProductRow, error) {
	rows, err := q.db.Query(ctx, getReviewsByProduct,
		arg.ProductID,
		arg.Column2,
		arg.Limit,
		arg.Offset,
	)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetReviewsByProductRow
	for rows.Next() {
		var i GetReviewsByProductRow
		if err := rows.Scan(
			&i.ID,
			&i.ProductID,
			&i.UserID,
			&i.Title,
			&i.Body,
			&i.Rating,
			&i.Status,
			&i.UpvoteCount,
			&i.DownvoteCount,
			&i.FlagCount,
			&i.Edited,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.DeletedAt,
			&i.UserHandle,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getReviewsByStatus = `-- name: GetReviewsByStatus :many
SELECT r.id, r.product_id, r.user_id, r.title, r.body, r.rating, r.status, r.upvote_count, r.downvote_count, r.flag_count, r.edited, r.created_at, r.updated_at, r.deleted_at, u.handle as user_handle, p.name as product_name
FROM reviews r
JOIN users u ON r.user_id = u.id
JOIN products p ON r.product_id = p.id
WHERE r.status = $1 AND r.deleted_at IS NULL AND u.deleted_at IS NULL AND p.deleted_at IS NULL
ORDER BY r.created_at ASC
LIMIT $2 OFFSET $3
`

type GetReviewsByStatusParams struct {
	Status string `json:"status"`
	Limit  int32  `json:"limit"`
	Offset int32  `json:"offset"`
}

type GetReviewsByStatusRow struct {
	ID            uuid.UUID          `json:"id"`
	ProductID     uuid.UUID          `json:"product_id"`
	UserID        uuid.UUID          `json:"user_id"`
	Title         *string            `json:"title"`
	Body          string             `json:"body"`
	Rating        int32              `json:"rating"`
	Status        string             `json:"status"`
	UpvoteCount   int32              `json:"upvote_count"`
	DownvoteCount int32              `json:"downvote_count"`
	FlagCount     int32              `json:"flag_count"`
	Edited        bool               `json:"edited"`
	CreatedAt     pgtype.Timestamptz `json:"created_at"`
	UpdatedAt     pgtype.Timestamptz `json:"updated_at"`
	DeletedAt     pgtype.Timestamptz `json:"deleted_at"`
	UserHandle    string             `json:"user_handle"`
	ProductName   string             `json:"product_name"`
}

func (q *Queries) GetReviewsByStatus(ctx context.Context, arg GetReviewsByStatusParams) ([]GetReviewsByStatusRow, error) {
	rows, err := q.db.Query(ctx, getReviewsByStatus, arg.Status, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetReviewsByStatusRow
	for rows.Next() {
		var i GetReviewsByStatusRow
		if err := rows.Scan(
			&i.ID,
			&i.ProductID,
			&i.UserID,
			&i.Title,
			&i.Body,
			&i.Rating,
			&i.Status,
			&i.UpvoteCount,
			&i.DownvoteCount,
			&i.FlagCount,
			&i.Edited,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.DeletedAt,
			&i.UserHandle,
			&i.ProductName,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getReviewsByUser = `-- name: GetReviewsByUser :many
SELECT r.id, r.product_id, r.user_id, r.title, r.body, r.rating, r.status, r.upvote_count, r.downvote_count, r.flag_count, r.edited, r.created_at, r.updated_at, r.deleted_at, p.name as product_name, p.slug as product_slug, c.name as company_name
FROM reviews r
JOIN products p ON r.product_id = p.id
JOIN companies c ON p.company_id = c.id
WHERE r.user_id = $1 AND r.deleted_at IS NULL AND p.deleted_at IS NULL AND c.deleted_at IS NULL
ORDER BY r.created_at DESC
LIMIT $2 OFFSET $3
`

type GetReviewsByUserParams struct {
	UserID uuid.UUID `json:"user_id"`
	Limit  int32     `json:"limit"`
	Offset int32     `json:"offset"`
}

type GetReviewsByUserRow struct {
	ID            uuid.UUID          `json:"id"`
	ProductID     uuid.UUID          `json:"product_id"`
	UserID        uuid.UUID          `json:"user_id"`
	Title         *string            `json:"title"`
	Body          string             `json:"body"`
	Rating        int32              `json:"rating"`
	Status        string             `json:"status"`
	UpvoteCount   int32              `json:"upvote_count"`
	DownvoteCount int32              `json:"downvote_count"`
	FlagCount     int32              `json:"flag_count"`
	Edited        bool               `json:"edited"`
	CreatedAt     pgtype.Timestamptz `json:"created_at"`
	UpdatedAt     pgtype.Timestamptz `json:"updated_at"`
	DeletedAt     pgtype.Timestamptz `json:"deleted_at"`
	ProductName   string             `json:"product_name"`
	ProductSlug   string             `json:"product_slug"`
	CompanyName   string             `json:"company_name"`
}

func (q *Queries) GetReviewsByUser(ctx context.Context, arg GetReviewsByUserParams) ([]GetReviewsByUserRow, error) {
	rows, err := q.db.Query(ctx, getReviewsByUser, arg.UserID, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetReviewsByUserRow
	for rows.Next() {
		var i GetReviewsByUserRow
		if err := rows.Scan(
			&i.ID,
			&i.ProductID,
			&i.UserID,
			&i.Title,
			&i.Body,
			&i.Rating,
			&i.Status,
			&i.UpvoteCount,
			&i.DownvoteCount,
			&i.FlagCount,
			&i.Edited,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.DeletedAt,
			&i.ProductName,
			&i.ProductSlug,
			&i.CompanyName,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getUserReviewForProduct = `-- name: GetUserReviewForProduct :one
SELECT id, product_id, user_id, title, body, rating, status, upvote_count, downvote_count, flag_count, edited, created_at, updated_at, deleted_at FROM reviews
WHERE product_id = $1 AND user_id = $2 AND deleted_at IS NULL
`

type GetUserReviewForProductParams struct {
	ProductID uuid.UUID `json:"product_id"`
	UserID    uuid.UUID `json:"user_id"`
}

func (q *Queries) GetUserReviewForProduct(ctx context.Context, arg GetUserReviewForProductParams) (Review, error) {
	row := q.db.QueryRow(ctx, getUserReviewForProduct, arg.ProductID, arg.UserID)
	var i Review
	err := row.Scan(
		&i.ID,
		&i.ProductID,
		&i.UserID,
		&i.Title,
		&i.Body,
		&i.Rating,
		&i.Status,
		&i.UpvoteCount,
		&i.DownvoteCount,
		&i.FlagCount,
		&i.Edited,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
	)
	return i, err
}

const hardDeleteReview = `-- name: HardDeleteReview :exec
DELETE FROM reviews
WHERE id = $1
`

func (q *Queries) HardDeleteReview(ctx context.Context, id uuid.UUID) error {
	_, err := q.db.Exec(ctx, hardDeleteReview, id)
	return err
}

const incrementDownvoteCount = `-- name: IncrementDownvoteCount :exec
UPDATE reviews
SET 
    downvote_count = downvote_count + 1,
    updated_at = NOW()
WHERE id = $1 AND deleted_at IS NULL
`

func (q *Queries) IncrementDownvoteCount(ctx context.Context, id uuid.UUID) error {
	_, err := q.db.Exec(ctx, incrementDownvoteCount, id)
	return err
}

const incrementFlagCount = `-- name: IncrementFlagCount :exec
UPDATE reviews
SET 
    flag_count = flag_count + 1,
    updated_at = NOW()
WHERE id = $1 AND deleted_at IS NULL
`

func (q *Queries) IncrementFlagCount(ctx context.Context, id uuid.UUID) error {
	_, err := q.db.Exec(ctx, incrementFlagCount, id)
	return err
}

const incrementUpvoteCount = `-- name: IncrementUpvoteCount :exec
UPDATE reviews
SET 
    upvote_count = upvote_count + 1,
    updated_at = NOW()
WHERE id = $1 AND deleted_at IS NULL
`

func (q *Queries) IncrementUpvoteCount(ctx context.Context, id uuid.UUID) error {
	_, err := q.db.Exec(ctx, incrementUpvoteCount, id)
	return err
}

const softDeleteReview = `-- name: SoftDeleteReview :exec
UPDATE reviews
SET deleted_at = NOW()
WHERE id = $1 AND deleted_at IS NULL
`

func (q *Queries) SoftDeleteReview(ctx context.Context, id uuid.UUID) error {
	_, err := q.db.Exec(ctx, softDeleteReview, id)
	return err
}

const updateReview = `-- name: UpdateReview :one
UPDATE reviews
SET 
    title = $2,
    body = $3,
    rating = $4,
    status = $5,
    edited = $6,
    updated_at = $7
WHERE id = $1 AND deleted_at IS NULL
RETURNING id, product_id, user_id, title, body, rating, status, upvote_count, downvote_count, flag_count, edited, created_at, updated_at, deleted_at
`

type UpdateReviewParams struct {
	ID        uuid.UUID          `json:"id"`
	Title     *string            `json:"title"`
	Body      string             `json:"body"`
	Rating    int32              `json:"rating"`
	Status    string             `json:"status"`
	Edited    bool               `json:"edited"`
	UpdatedAt pgtype.Timestamptz `json:"updated_at"`
}

func (q *Queries) UpdateReview(ctx context.Context, arg UpdateReviewParams) (Review, error) {
	row := q.db.QueryRow(ctx, updateReview,
		arg.ID,
		arg.Title,
		arg.Body,
		arg.Rating,
		arg.Status,
		arg.Edited,
		arg.UpdatedAt,
	)
	var i Review
	err := row.Scan(
		&i.ID,
		&i.ProductID,
		&i.UserID,
		&i.Title,
		&i.Body,
		&i.Rating,
		&i.Status,
		&i.UpvoteCount,
		&i.DownvoteCount,
		&i.FlagCount,
		&i.Edited,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
	)
	return i, err
}

const updateReviewStatus = `-- name: UpdateReviewStatus :exec
UPDATE reviews
SET 
    status = $2,
    updated_at = NOW()
WHERE id = $1 AND deleted_at IS NULL
`

type UpdateReviewStatusParams struct {
	ID     uuid.UUID `json:"id"`
	Status string    `json:"status"`
}

func (q *Queries) UpdateReviewStatus(ctx context.Context, arg UpdateReviewStatusParams) error {
	_, err := q.db.Exec(ctx, updateReviewStatus, arg.ID, arg.Status)
	return err
}
