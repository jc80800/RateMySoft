// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.30.0
// source: credentials.sql

package sqlc

import (
	"context"

	"github.com/google/uuid"
	"github.com/jackc/pgx/v5/pgtype"
)

const createCredential = `-- name: CreateCredential :one
INSERT INTO credentials (
    user_id, provider, identifier, secret_hash, created_at, updated_at
) VALUES (
    $1, $2, $3, $4, $5, $6
) RETURNING user_id, provider, identifier, secret_hash, created_at, updated_at, deleted_at
`

type CreateCredentialParams struct {
	UserID     uuid.UUID          `json:"user_id"`
	Provider   string             `json:"provider"`
	Identifier string             `json:"identifier"`
	SecretHash *string            `json:"secret_hash"`
	CreatedAt  pgtype.Timestamptz `json:"created_at"`
	UpdatedAt  pgtype.Timestamptz `json:"updated_at"`
}

func (q *Queries) CreateCredential(ctx context.Context, arg CreateCredentialParams) (Credential, error) {
	row := q.db.QueryRow(ctx, createCredential,
		arg.UserID,
		arg.Provider,
		arg.Identifier,
		arg.SecretHash,
		arg.CreatedAt,
		arg.UpdatedAt,
	)
	var i Credential
	err := row.Scan(
		&i.UserID,
		&i.Provider,
		&i.Identifier,
		&i.SecretHash,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
	)
	return i, err
}

const getCredential = `-- name: GetCredential :one
SELECT user_id, provider, identifier, secret_hash, created_at, updated_at, deleted_at FROM credentials
WHERE user_id = $1 AND provider = $2 AND deleted_at IS NULL
`

type GetCredentialParams struct {
	UserID   uuid.UUID `json:"user_id"`
	Provider string    `json:"provider"`
}

func (q *Queries) GetCredential(ctx context.Context, arg GetCredentialParams) (Credential, error) {
	row := q.db.QueryRow(ctx, getCredential, arg.UserID, arg.Provider)
	var i Credential
	err := row.Scan(
		&i.UserID,
		&i.Provider,
		&i.Identifier,
		&i.SecretHash,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
	)
	return i, err
}

const getCredentialByIdentifier = `-- name: GetCredentialByIdentifier :one
SELECT user_id, provider, identifier, secret_hash, created_at, updated_at, deleted_at FROM credentials
WHERE provider = $1 AND identifier = $2 AND deleted_at IS NULL
`

type GetCredentialByIdentifierParams struct {
	Provider   string `json:"provider"`
	Identifier string `json:"identifier"`
}

func (q *Queries) GetCredentialByIdentifier(ctx context.Context, arg GetCredentialByIdentifierParams) (Credential, error) {
	row := q.db.QueryRow(ctx, getCredentialByIdentifier, arg.Provider, arg.Identifier)
	var i Credential
	err := row.Scan(
		&i.UserID,
		&i.Provider,
		&i.Identifier,
		&i.SecretHash,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
	)
	return i, err
}

const hardDeleteCredential = `-- name: HardDeleteCredential :exec
DELETE FROM credentials
WHERE user_id = $1 AND provider = $2
`

type HardDeleteCredentialParams struct {
	UserID   uuid.UUID `json:"user_id"`
	Provider string    `json:"provider"`
}

func (q *Queries) HardDeleteCredential(ctx context.Context, arg HardDeleteCredentialParams) error {
	_, err := q.db.Exec(ctx, hardDeleteCredential, arg.UserID, arg.Provider)
	return err
}

const softDeleteCredential = `-- name: SoftDeleteCredential :exec
UPDATE credentials
SET deleted_at = NOW()
WHERE user_id = $1 AND provider = $2 AND deleted_at IS NULL
`

type SoftDeleteCredentialParams struct {
	UserID   uuid.UUID `json:"user_id"`
	Provider string    `json:"provider"`
}

func (q *Queries) SoftDeleteCredential(ctx context.Context, arg SoftDeleteCredentialParams) error {
	_, err := q.db.Exec(ctx, softDeleteCredential, arg.UserID, arg.Provider)
	return err
}

const updateCredential = `-- name: UpdateCredential :one
UPDATE credentials
SET 
    identifier = $3,
    secret_hash = $4,
    updated_at = $5
WHERE user_id = $1 AND provider = $2 AND deleted_at IS NULL
RETURNING user_id, provider, identifier, secret_hash, created_at, updated_at, deleted_at
`

type UpdateCredentialParams struct {
	UserID     uuid.UUID          `json:"user_id"`
	Provider   string             `json:"provider"`
	Identifier string             `json:"identifier"`
	SecretHash *string            `json:"secret_hash"`
	UpdatedAt  pgtype.Timestamptz `json:"updated_at"`
}

func (q *Queries) UpdateCredential(ctx context.Context, arg UpdateCredentialParams) (Credential, error) {
	row := q.db.QueryRow(ctx, updateCredential,
		arg.UserID,
		arg.Provider,
		arg.Identifier,
		arg.SecretHash,
		arg.UpdatedAt,
	)
	var i Credential
	err := row.Scan(
		&i.UserID,
		&i.Provider,
		&i.Identifier,
		&i.SecretHash,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
	)
	return i, err
}
